# -*- coding: utf-8 -*-
"""Felipe_Avila_Silva_Relatorio3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lq9KFgwUjcygz4SmHUU--dQtK-EbYWNx

DEF
"""

import numpy as np
from numpy import linalg


def lagrange(x, y, valor):
  tamx = len(x)
  tamy = tamx - 1
  yp = 0
  cont = 0

  for i in range(tamy + 1):
    p = 1
    for j in range(tamy + 1):
      if j != i:
        p = p * (valor - x[j]) / (x[i] - x[j])
      cont = cont + 1
    yp = yp + y[i] * p
    
  return yp, cont 


def newton(x, y, valor):
  tamx = len(x)
  tamy = tamx - 1
  
  yp = 0
  cont = 0
  dely = np.copy(y)
    
  for k in range(1, tamx):
    for i in range(tamx-1, k-1, -1): 
      dely[i] = (dely[i] - dely[i-1]) / (x[i] - x[i-k])
      cont = cont + 1         
  yp = dely[tamx-1]
  
  for i in range(tamx-1, 0, -1):
    yp = yp * (valor - x[i-1]) + dely[i-1]
  
  return yp, cont


def s(x, xi, y, bi, ci, di):
  return y + bi * (x-xi) + ci * (x - xi)**2 + di * (x - xi)**3 

def scn(x, y): 
  n = 5 #x0, x1, x2, x3, x4, x5 ---- sao 6 elementos = n+1
   #float

  h = [0, 0, 0, 0, 0, 0]
  alfa = [0, 0, 0, 0, 0, 0]

  for i in range(n):
    h[i] = x[i+1] - x[i]
  
  for i in range(1, n, +1):
    alfa[i] = ((3/h[i])*(y[i+1] - y[i]) - (3/h[i-1]) * (y[i]-y[i-1]))

  #float 
  l = [0, 0, 0, 0, 0, 0]
  u = [0, 0, 0, 0, 0, 0]
  z = [0, 0, 0, 0, 0, 0]

  l[0] = 1
  u[0] = 0
  z[0] = 0

  for i in range(1, n, +1):
    l[i] = ((2*(x[i+1]-x[i-1])) - (h[i-1] * u[i-1]))
    u[i] = h[i]/l[i]
    z[i] = ((alfa[i] - (h[i-1] * z[i-1]))/l[i])

  l[n] = 1
  z[n] = 0
  #float
  c = [0, 0, 0, 0, 0, 0]
  b = [0, 0, 0, 0, 0, 0]
  d = [0, 0, 0, 0, 0, 0]
  c[n] = 0

  for i in range(n-1, -1, -1):
    c[i] = z[i] - (u[i]*c[i+1])
    b[i] = (((y[i+1]-y[i])/h[i]) - ((h[i]*(c[i+1]+2*c[i]))/3) )
    d[i] = ((c[i+1] - c[i])/ (3*h[i]))

  f = lambda x: 0.0185*x**5 - 0.4440*x**4 + 3.9125*x**3 - 15.4560*x**2 + 27.0690*x - 14.1000
  original = []
  spline = []

  reta = np.linspace(1, 9, 1000)
  for pontos in reta:
    original.append(f(pontos))
    if (pontos >= 1 and pontos < 3):
      #print("pontos = " + str(pontos) + " x = " + str(x[1]) + " y = " + str(y[1]) + " b = " + str(b[1]) + " c = " + str(c[1]) + " d = " + str(d[1]))
      spline.append(s(pontos, x[0], y[0], b[0], c[0], d[0]))
    if (pontos >= 3 and pontos < 5):
      spline.append(s(pontos, x[1], y[1], b[1], c[1], d[1]))
    if (pontos >= 5 and pontos < 6):
      spline.append(s(pontos, x[2], y[2], b[2], c[2], d[2]))
    if (pontos >= 6 and pontos < 7):
      spline.append(s(pontos, x[3], y[3], b[3], c[3], d[3]))
    if (pontos >= 7 and pontos <= 9):
      spline.append(s(pontos, x[4], y[4], b[4], c[4], d[4]))
  

  plt.plot(reta, original, linestyle = '-')
  plt.plot(reta, spline, linestyle = '-')
  plt.grid()
  plt.xlabel('x')
  plt.ylabel('y')
  plt.show


def MMQ(X, Y):
    pontos = 9
    grau = 1
     
    H = np.zeros ((grau+1, pontos))
    for i in range (len(H)):
      for j in range(len(H[0])):
        H[i][j] = pow(X[j], i)

    A = np.zeros((grau+1, grau+1))
    b = np.zeros(grau+1)
    for i in range(len(A)):
      for j in range(len(A)):
        A[i][j] = H[i].dot(H[j])
      b[i]=H[i].dot(Y)

    x = np.linalg.solve(A, b)
    for i in range (len(x)):
      print("c" + str(i)+"=", x[i])
    return x[0], x[1]


def f(x,c0,c1):
  return  c1*x+c0

"""1. lagrange"""

x = [200, 250, 300, 350, 400, 450]
y = [1.708, 1.367, 1.139, 0.967, 0.854, 0.759]
valor = 330

yp, cont = lagrange(x, y, valor)
print('estimativa é de: %.3f' % yp)
print('houve %d interações' % cont)

"""newton"""

x = [200, 250, 300, 350, 400, 450]
y = [1.708, 1.367, 1.139, 0.967, 0.854, 0.759]
valor = 330

yp, cont = newton(x, y, valor)
print('estimativa é de: %.3f' % yp)
print('houve %d interações' % cont)

"""2. lagrange"""

x = [0.25, 0.75, 1.25, 1.5, 2.0]
y = [-0.45, -0.60, 0.70, 1.88, 6.00]
valor = 1.15

yp, cont = lagrange(x, y, valor)
print('estimativa é de: %.3f' % yp)
print('houve %d interações' % cont)

"""newton"""

x = [0.25, 0.75, 1.25, 1.5, 2.0]
y = [-0.45, -0.60, 0.70, 1.88, 6.00]
valor = 1.15

yp, cont = newton(x, y, valor)
print('estimativa é de: %.3f' % yp)
print('houve %d interações' % cont)

"""3."""

import math
import matplotlib.pyplot as plt
import numpy as np
x = [1, 3, 5, 6, 7, 9]
y = [1.000, 2.172, 4.220, 5.430, 4.912, 9.120]

scn(x, y)

"""4.A"""

import matplotlib.pyplot as plt

X = [183,173,168,188,158,163,193,163,178]
Y = [79,69,70,81,61,63,79,71,73]

plt.scatter(X, Y)
plt.grid()
plt.xlabel('altura')
plt.ylabel('peso')
plt.show

"""B"""

import matplotlib.pyplot as plt

X = [183,173,168,188,158,163,193,163,178]
Y = [79,69,70,81,61,63,79,71,73]

c0, c1 = MMQ(X , Y)

reta = np.linspace(150,200, 9)
valor = [f(X, c0, c1) for X in reta]

plt.plot(reta, valor, linestyle = '-')
plt.scatter(X, Y)
plt.grid()
plt.xlabel('altura')
plt.ylabel('peso')
plt.show

"""C"""

import matplotlib.pyplot as plt

X = [79,69,70,81,61,63,79,71,73]
Y = [183,173,168,188,158,163,193,163,178]

c0, c1 = MMQ(X , Y)

def f(x,c0,c1):
  return  c1*x+c0

reta = np.linspace(60,85, 9)
valor = [f(X, c0, c1) for X in reta]

plt.plot(reta, valor, linestyle = '-')
plt.scatter(X, Y)
plt.grid()
plt.xlabel('peso')
plt.ylabel('altura')
plt.show

"""D"""

import matplotlib.pyplot as plt

X = [183,173,168,188,158,163,193,163,178] #altura
Y = [79,69,70,81,61,63,79,71,73]  #peso

X2 = [79,69,70,81,61,63,79,71,73] #peso
Y2 = [183,173,168,188,158,163,193,163,178] #altura

c0, c1 = MMQ(X , Y)
reta = np.linspace(150, 200, 9)
valor = [f(X, c0, c1) for X in reta]

c0, c1 = MMQ(X2 , Y2)
reta2 = np.linspace(50, 100, 9)
valor2 = [f(X2, c0, c1) for X2 in reta2]

plt.plot(reta, valor, linestyle = '-')
plt.plot(reta2, valor2, linestyle = '-')
plt.grid()
plt.show